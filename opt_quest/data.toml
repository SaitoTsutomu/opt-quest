[probs.prob01]
name = "商品の仕入れ"
desc = """\
トラックで商品Aと商品Bを仕入れに行きます。<br>
商品Aは1kgで100円、商品Bは1kgで60円の利益になります。<br>
仕入先では各々最大800kgしか買えません。また合わせて1000kgまでしか買えません。<br>
利益を最大にするには、各々何kg買えばよいでしょうか？
<br>
<img src="https://2.bp.blogspot.com/-fDndjiXKQ08/WhUiqLqsH_I/AAAAAAABIUk/ehcQWzdFzGA65nzF2BaX1N6MJc6tnfl0wCLcBGAs/s400/truck_nidai_white.png" width="150">
"""
vars = [
    "商品ごとの仕入れ量（円）",
    "*商品ごとの仕入れ量（kg）",
    "商品の仕入れ量の合計（kg）",
]
objs = [
    "商品ごとの利益（円）",
    "*商品の利益の合計（円）",
]
conds = [
    "商品ごとの利益（円）",
    "商品の利益の合計（円）",
    "*商品ごとの仕入れ量の上限（kg）",
    "*商品の仕入れ量の合計の上限（kg）",
]

[probs.prob02]
name = "野菜のお土産"
desc = """\
先日、あなたが実家に帰ると、お土産に野菜を持って帰るよう言われました。<br>
東京の野菜は高いので、「儲かった」と喜びましたが、量が多すぎます。せいぜい5kg しか持って帰れないとします。<br>
また、野菜は切ったりすると傷むので、そのまま持って帰ることにします。
<br>
<img src="https://3.bp.blogspot.com/-v3bUhbtBi1Y/UUFxxbikL-I/AAAAAAAAO1A/vqZw9bYuabY/s500/vegetable.png" width="150">
"""
vars = [
    "*野菜ごとの「持って帰るかどうか」",
    "野菜ごとの持ち帰り量（kg）",
    "野菜の持ち帰り量の合計（kg）",
]
objs = [
    "野菜ごとの利益（円）",
    "*野菜の利益の合計（円）",
]
conds = [
    "野菜ごとの利益（円）",
    "野菜の利益の合計（円）",
    "野菜ごとの持ち帰り量の上限（kg）",
    "*野菜の持ち帰り量の合計の上限（kg）",
]

[probs.prob03]
name = "乗換案内"
desc = """\
自分の家の最寄り駅から、実家の最寄り駅までの最短路を探したい。
<br>
<img src="https://3.bp.blogspot.com/-mdxOgTSzTtA/W1QPOSz1YFI/AAAAAAABNdw/rPz1LaD5REER-B3vGEhYViKDrU-ycl60wCLcBGAs/s450/train_jousya_woman.png" width="150">
"""
vars = [
    "駅ごとの「乗り換えるかどうか」",
    "駅ごとの「自分の家の最寄り駅からの距離」（km）",
    "*経路ごとの「使うかどうか」",
]
objs = [
    "駅ごとの「家の最寄り駅からの距離」（km）",
    "*全経路の距離の合計（km）",
]
conds = [
    "全経路の距離の合計（km）",
    "*自分の家の最寄り駅の接続数",
    "*実家の家の最寄り駅の接続数",
    "*駅ごとの接続数",
    "駅ごとの「家の最寄り駅からの距離」（km）",
]

[probs.prob04]
name = "ナップサック"
desc = """\
ナップサックに、いくつかの荷物を詰込みます。<br>
詰込む荷物の容量の和がナップサックの容量を超えないように、荷物の価値の和を最大にします。
<br>
<img src="https://images.pyq.jp/repo/prod/mo_algo_2/mo_algo_2.jpg" width="150">
"""
vars = [
    "ナップサックの容量",
    "ナップサックの価値",
    "荷物ごとの容量",
    "荷物ごとの価値",
    "*荷物ごとの「入れるかどうか」",
]
objs = [
    "ナップサックの容量",
    "ナップサックの価値",
    "荷物ごとの容量",
    "荷物ごとの価値",
    "荷物の容量の合計",
    "*荷物の価値の合計",
]
conds = [
    "ナップサックの容量",
    "ナップサックの価値",
    "荷物ごとの容量",
    "荷物ごとの価値",
    "*荷物の容量の合計",
    "荷物の価値の合計",
]

[probs.prob05]
name = "ポートフォリオ"
desc = """\
株の銘柄を購入する割合を決めます。
投資に対する利益の下限を条件として、リスク（分散）を最小化します。
ただし、各銘柄間は独立とします。
<br>
<img src="https://3.bp.blogspot.com/-eZg7ny24Qkk/WkR91IX_MdI/AAAAAAABJVU/_E8oVVwiaRwUj2SN9h8hsIKpMR0yt3WgQCLcBGAs/s800/kabu_chart_man.png" width="200">
"""
vars = [
    "銘柄ごとの利益",
    "銘柄ごとの分散",
    "*銘柄ごとの「購入する割合」",
    "銘柄ごとの「購入するかどうか」",
    "銘柄間の相関",
    "全銘柄の利益",
]
objs = [
    "銘柄ごとの利益",
    "銘柄ごとの分散",
    "銘柄間の相関",
    "全銘柄の利益",
    "*全銘柄の分散",
]
conds = [
    "銘柄ごとの利益",
    "銘柄ごとの分散",
    "銘柄間の相関",
    "*全銘柄の利益",
    "全銘柄の分散",
]

[probs.prob06]
name = "数独"
desc = """\
9×9のマスのいくつかに「1から9」の数字が入っています。<br>
下記の条件を満たすように残りのマスの数字を埋めてください。
<ul>
<li>各行ごとに、数字は1から9</li>
<li>各列ごとに、数字は1から9</li>
<li>3x3の範囲ごとに、数字は1から9</li>
</ul>
<img src="https://images.pyq.jp/repo/prod/mo_puzzle_03/mo_puzzle_04.jpg" width="150">
"""
vars = [
    "数字ごとのマスの位置",
    "行ごと数字ごとの使用数",
    "列ごと数字ごとの使用数",
    "3x3の範囲ごと数字ごとの使用数",
    "行ごと列ごとの数字",
    "*行ごと列ごとの数字ごとに「使うかどうか」",
]
objs = [
    "*なし",
]
conds = [
    "*特定のマス、特定の数字の使用数",
    "*行ごと列ごとの使用数",
    "*行ごと数字ごとの使用数",
    "*列ごと数字ごとの使用数",
    "*3x3の範囲ごと数字ごとの使用数",
]

[probs.prob07]
name = "部品調達"
desc = """\
倉庫群から工場群へ部品を搬送しないといけない。
輸送費が最小となる計画を求めたい。
各倉庫からの搬出は供給可能量以下とし、各工場への搬入は需要量以上とする。
<br>
<img src="https://images.pyq.jp/repo/prod/mo_pdopt_04/mo_mip_03.jpg" width="200">
"""
vars = [
    "倉庫ごと工場ごとの輸送費（円）",
    "*倉庫ごと工場ごとの輸送量（kg）",
    "倉庫ごとの供給可能量（kg）",
    "工場ごとの需要量（kg）",
]
objs = [
    "倉庫ごと工場ごとの輸送費（円）",
    "*倉庫と工場間の輸送費の合計（円）",
    "倉庫ごと工場ごとの輸送量（kg）",
    "倉庫と工場間の輸送量の合計（kg）",
    "倉庫ごとの輸送量（kg）",
    "工場ごとの需要量（kg）",
]
conds = [
    "倉庫ごと工場ごとの輸送費（円）",
    "倉庫と工場間の輸送費の合計（円）",
    "倉庫ごと工場ごとの輸送量（kg）",
    "倉庫と工場間の輸送量の合計（kg）",
    "*倉庫ごとの輸送量（kg）",
    "*工場ごとの需要量（kg）",
]

[probs.prob08]
name = "野球選手の守備"
desc = """\
9人の選手を9つの守備に割当てる。
対応ごとに適性が与えられている（小さいほど良い）。
適性の総和を最小化せよ。
<br>
<img src="https://1.bp.blogspot.com/-E_BQjCyjWyo/XNE_hOlvaPI/AAAAAAABSyQ/Lb4wZ0KuCuUMXZblPXC1yEzCi9iYa_GpwCLcBGAs/s800/sports_baseball_woman_asia.png" width="150">
"""
vars = [
    "選手ごとの守備",
    "選手ごと守備ごとの適性",
    "全選手の適性の合計",
    "*選手ごと守備ごとの「割り当てるかどうか」",
]
objs = [
    "選手ごと守備ごとの適性",
    "*全選手の適性の合計",
    "選手ごとの割り当ての合計",
    "守備ごとの割り当ての合計",
]
conds = [
    "選手ごと守備ごとの適性",
    "全選手の適性の合計",
    "*選手ごとの割り当ての合計",
    "*守備ごとの割り当ての合計",
]

[probs.prob09]
name = "四色問題"
desc = """\
1つの県を1色とし、隣接する県は異なるように、日本全体を4色で塗る。
<br>
<img src="/static/fourcolor.jpeg" width="150">
"""
vars = [
    "各県の色",
    "*県ごと色ごとの「割り当てるかどうか」",
]
objs = [
    "*なし",
]
conds = [
    "*県ごとの色数",
    "色ごとの県数",
    "隣接する県同士の色数",
    "*色ごと、隣接する県同士の割当数",
]

[probs.prob10]
name = "デートコース"
desc = """\
8つのアトラクションがある遊園地でデートをする。<br>
200分の制限時間の中で総満足度を最大化しよう。
<br>
<img src="/static/datecourse.jpeg" width="250">

<h3>ヒント</h3>
200分という制限時間があるため、全てのアトラクションを回れるとは限らない。
そこで、アトラクションを選ぶかどうかの変数と、
アトラクション I の後にアトラクション J に行くかどうかを決めるための変数を用意する。<br>
また、入口からの訪れる順番を変数として、必ず入口からたどれるように制約条件を入れる。
"""
vars = [
    "*アトラクションごとの「行くかどうか」",
    "*アトラクション I からアトラクション J に「行くかどうか」",
    "*アトラクションごとの「訪れる順番」",
]
objs = [
    "*満足度の総和",
]
conds = [
    "*総移動時間が制限時間内",
    "*アトラクションを選んだら、訪れること",
    "*アトラクションに入ったら出ること",
    "*入口から接続していること",
]
